import{_ as n,p as s,q as a,a1 as e}from"./framework-cd67069b.js";const t={},c=e(`<h2 id="this-指向" tabindex="-1"><a class="header-anchor" href="#this-指向" aria-hidden="true">#</a> this 指向</h2><h3 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a> 箭头函数</h3><p>箭头函数的 <code>this</code> 是在创建它时外层 <code>this</code> 的指向。这里的重点有两个：</p><ul><li>创建箭头函数时，就已经确定了它的 <code>this</code> 指向。</li><li>箭头函数内的 <code>this</code> 指向外层的 <code>this。</code></li><li><strong>箭头函数中 <code>this</code> 不会被修改</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里 this 指向取决于外层 this,不会被修改</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">func</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Window</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="new" tabindex="-1"><a class="header-anchor" href="#new" aria-hidden="true">#</a> new</h3><p><strong>当使用 new 关键字调用函数时，函数中的 <code>this</code> 一定是 JS 创建的新对象。</strong></p><h3 id="bind" tabindex="-1"><a class="header-anchor" href="#bind" aria-hidden="true">#</a> bind</h3><p><strong>多次 <code>bind</code> 时只认第一次 <code>bind</code> 的值。</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">func</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="apply和call" tabindex="-1"><a class="header-anchor" href="#apply和call" aria-hidden="true">#</a> apply和call</h3><p><strong><code>apply</code> 和 <code>call</code> 的第一个参数都是 <code>this</code> 区别在于通过 <code>apply</code> 调用时实参是放到数组中的，而通过 <code>call</code> 调用时实参是逗号分隔的。</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
boundFunc <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">boundFunc</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="直接调用" tabindex="-1"><a class="header-anchor" href="#直接调用" aria-hidden="true">#</a> 直接调用</h3><p><strong>在函数不满足前面的场景，被直接调用时，<code>this</code> 将指向全局对象。在浏览器环境中全局对象是 <code>Window</code>，在 <code>Node.js</code> 环境中是 <code>Global</code>。</strong></p>`,15),o=[c];function p(i,l){return s(),a("div",null,o)}const d=n(t,[["render",p],["__file","this.html.vue"]]);export{d as default};
