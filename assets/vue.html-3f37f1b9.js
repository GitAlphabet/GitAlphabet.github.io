import{_ as n,p as e,q as s,a1 as a}from"./framework-347dbdeb.js";const o={},t=a(`<h2 id="vue面试题" tabindex="-1"><a class="header-anchor" href="#vue面试题" aria-hidden="true">#</a> Vue面试题</h2><h3 id="proxy与defineproperty" tabindex="-1"><a class="header-anchor" href="#proxy与defineproperty" aria-hidden="true">#</a> Proxy与defineProperty</h3><p>Proxy 的优势如下:</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>Proxy 可以直接监听对象而非属性；
Proxy 可以直接监听数组的变化；
Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；
Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改；
Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Object.defineProperty 的优势如下:</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,而且无法用 polyfill 磨平
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="computed、watch、methods" tabindex="-1"><a class="header-anchor" href="#computed、watch、methods" aria-hidden="true">#</a> computed、watch、methods</h3><ul><li><code>computed</code>: <strong>有缓存，data 不变不会重新计算；提高性能</strong>。</li><li><code>computed</code> 为什么需要缓存？简单说就是可以提高性能。假设我们有一个性能开销比较大的计算属性A,它需要遍历一个巨大的数组做大量的计算，然后我们可能有其他的属性依赖于A，如果没有缓存，将不可避免的多次执行A的<code>getter</code>，如果不希望有缓存请用方法代替</li><li><code>computed</code> 和 <code>watch</code>的使用场景：如果一个数据需要经过复杂计算就用 <code>computed</code>；如果一个数据需要被监听并且对数据做一些操作就用<code>watch</code>；<code>watch</code>擅长处理的场景：一个数据影响多个数据；<code>computed</code>擅长处理的场景：一个数据受多个数据影响</li></ul><h3 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化" aria-hidden="true">#</a> 性能优化</h3><ul><li>异步渲染（合并<code>data</code>修改）</li><li><code>$nextTick</code> 在<code>DOM</code>更新后触发回调</li><li>合理使用 <code>v-if</code> 和 <code>v-show</code></li><li>合理使用 <code>computed</code>、<code>keep-alive</code></li><li><code>v-for</code> 中加 <code>key</code></li><li>自定义事件和<code>DOM</code>事件及时销毁（<code>beforeDestory</code>）</li><li>合理使用异步组件（路由、组件懒加载）</li><li><code>data</code> 层级不要太深，减少内部递归次数。</li></ul><h3 id="getcurrentinstance" tabindex="-1"><a class="header-anchor" href="#getcurrentinstance" aria-hidden="true">#</a> getCurrentInstance</h3><p>getCurrentInstance 支持访问内部组件实例，用于高阶用法或库的开发。</p><ul><li><strong>getCurrentInstance 只能在 setup 或生命周期钩子中调用。</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> getCurrentInstance <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> internalInstance <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    internalInstance<span class="token punctuation">.</span>appContext<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties <span class="token comment">// 访问 globalProperties</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="watch和watcheffect" tabindex="-1"><a class="header-anchor" href="#watch和watcheffect" aria-hidden="true">#</a> watch和watchEffect</h3><p><code>watch</code></p><ul><li>与 <code>watchEffect</code> 比较，<code>watch</code> 允许我们： <ul><li><strong>惰性地执行副作用</strong>；</li><li>更具体地说明应触发侦听器重新运行的状态；</li><li>访问被侦听状态的先前值和当前值。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 侦听一个 getter</span>
<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">watch</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">count<span class="token punctuation">,</span> prevCount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">/* ... */</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
    immediate<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span> <span class="token comment">// 默认：false,初始化的时候不监听</span>
    deep<span class="token operator">?</span><span class="token operator">:</span> boolean       <span class="token comment">// 深度监听</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token comment">// 直接侦听一个 ref</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token function">watch</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">count<span class="token punctuation">,</span> prevCount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>watchEffect</code><br> 在响应式地跟踪其依赖项时立即运行一个函数，<strong>并在更改依赖项时重新运行它(即初始化的时候监听)</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// -&gt; logs 0</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  count<span class="token punctuation">.</span>value<span class="token operator">++</span> <span class="token comment">// -&gt; logs 1</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="proxy" tabindex="-1"><a class="header-anchor" href="#proxy" aria-hidden="true">#</a> proxy</h3><p><strong>vue3.0为什么要用Proxy API替代defineProperty API</strong></p><p>响应式优化。</p><p>1.<strong>defineProperty API的局限性最大原因是它只针对单例属性做监听</strong> 。vue2.x中的响应式实现是基于<code>defineProperty</code>中的<code>descriptor</code>，对<code>data</code>中的属性遍历+递归，为每个属性设置了<code>getter</code>、<code>setter</code>。这也就是为什么vue只能对data中预定义的属性做出响应的原因，在<code>vue</code>中使用下标的方式直接修改属性的值或者添加一个预先不存在的对象属性是无法做到<code>settter</code>监听的，这是<code>defineProperty</code>的局限性。</p><p>2.<strong>Proxy API的监听是针对一个对象的，那么对这个对象的所有操作会进入监听操作，这就完全可以代理所有属性，将会带来很大的性能提升和更优的代码</strong> 。<code>Proxy</code>可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。</p><p>3.<strong>响应式是惰性的</strong>。在vue2.x中，对于一个深层属性嵌套的对象，要劫持它内部深层次的变化，就需要递归便利这个对象，执行<code>Object.defineProperty</code>把每一层对象数据都变成响应式的，这无疑会有很大的性能消耗。在vue3.0中，使用<code>Proxy API</code>并不能监听到对象内部深层次的属性变化，因此它的处理方式是在<code>getter</code>中去递归响应式，这样的好处是真正访问到的内部属性才会变成响应式，简单可以说是按需实现响应式，减少性能消耗。</p><h3 id="vue3编译优化" tabindex="-1"><a class="header-anchor" href="#vue3编译优化" aria-hidden="true">#</a> vue3编译优化</h3><p>1.<strong>生成 Block tree</strong>。vue2.x的数据更新并触发渲染的粒度是组件级的，单个组件内部需要遍历该组件的整个vnode树。<strong>在2.0里，渲染效率的快慢与组件大小成正相关。并且，对于一些静态节点，又无数据更新，这些遍历都是性能浪费。</strong></p><p>vue3.0做到了通过编译阶段对静态模版的分析，编译生成了 Block tree。<strong>Block tree是一个将模版基于动态节点指令切割的嵌套区块</strong>，每个区域内部的节点结构是固定的，每个区块只需要追踪自身包含的动态节点。所以，<strong>在3.0里，渲染效率不再与模版大小成正相关，而是与模版中动态节点的数量成正相关。</strong></p><p>2.<strong>slot编译优化</strong>。在vue2.x中，如果一个组件传入了slot，那么每次父组件更新的时候，会强制使子组件uplate，造成性能浪费。</p><p>vue3.0优化了slot的生成，使得非动态slot中属性的更新只会触发子组件的更新。动态slot指的是在slot上面使用v-if，v-for，动态slot名字等会导致slot产生运行时动态变化但是又无法被子组件track的操作。</p><p>3.diff算法优化。</p><h3 id="vue3和vue2区别" tabindex="-1"><a class="header-anchor" href="#vue3和vue2区别" aria-hidden="true">#</a> vue3和vue2区别</h3><p>Vue 3 和 Vue 2 有许多显著的区别，其中一些包括：</p><ul><li>更快的性能: <ul><li>Vue 3 的响应式系统使用了 <code>Proxy</code>，而 Vue 2 使用的是 <code>Object.defineProperty</code>。由于 <code>Proxy</code> 比 <code>Object.defineProperty</code> 更加强大，因此 Vue 3 的响应式系统可以处理更复杂的数据结构，并且在某些情况下比 Vue 2 更快。</li><li>Vue 3 的编译器采用了全新的静态渲染器，可以生成更快的渲染函数。在某些情况下，Vue 3 的渲染速度可以比 Vue 2 快 2-4 倍。</li><li>Vue 3 在内部进行了大量的优化，可以更好地利用现代构建工具中的 <code>Tree-shaking</code> 技术，使得最终打包出来的文件更小。</li></ul></li><li>更小的包: <ul><li>Vue 3 的内部代码被拆分为多个包，可以更好地利用现代构建工具中的 <code>Tree-shaking</code> 技术，从而使得最终打包出来的文件更小。</li><li>Vue 3 中的代码被拆分为多个模块，可以更好地支持懒加载，从而减少初始加载时的文件大小。</li></ul></li><li>更好的 <code>TypeScript</code> 支持: <ul><li>Vue 3 中对 <code>TypeScript</code> 的支持进行了改进，可以更好地支持 <code>TypeScript</code>。例如，Vue 3 中可以使用 ref 和 reactive 这些 API 来声明响应式变量，并且可以使用 defineComponent 来声明组件。</li><li>Vue 3 中的响应式系统使用了 <code>Proxy</code>，可以更好地支持 <code>TypeScript</code>。由于 <code>Proxy</code> 比 <code>Object.defineProperty</code> 更加强大，因此可以更好地处理复杂的数据结构，并且在某些情况下比 Vue 2 更快。</li><li>Vue 3 中对 IDE 支持进行了改进，可以更好地支持自动补全和错误检测。</li></ul></li><li>更好的组合式 API: <ul><li>Vue 3 引入了组合式 API，可以更灵活地组织代码，并且可以更好地重用代码逻辑。组合式 API 可以帮助开发人员更好地组织代码，避免过度嵌套和代码重复。</li><li>组合式 API 支持更多的 <code>React Hooks</code> 风格的 API，例如 <code>useSetup</code>、<code>useComputed</code> 等，可以更好地组织代码。</li><li>组合式 API 还可以通过 <code>provide</code> 和 <code>inject</code> API 来传递数据，可以更好地解决组件之间的通信问题。</li></ul></li><li>更好的响应式系统: <ul><li>Vue 3 的响应式系统使用了 <code>Proxy</code>，可以更好地处理复杂的数据结构，并且在某些情况下比 Vue 2 更快。</li><li>Vue 3 的响应式系统支持多个根响应式变量，可以更好地组织数据。</li></ul></li><li>更好的事件处理: <ul><li>Vue 3 中引入了全新的事件处理 API，可以更好地处理事件。</li><li>Vue 3 中的事件处理 API 支持多个事件处理函数，可以更好地组织事件处理逻辑。</li><li>Vue 3 中的事件处理 API 支持事件修饰符和按键修饰符，可以更好地处理特殊事件。</li></ul></li><li>更好的虚拟 DOM: <ul><li>Vue 3 中的虚拟 DOM 使用了全新的算法，可以更好地处理大型应用和大量数据。</li><li>Vue 3 中的虚拟 DOM 支持了 <code>Fragments</code>，可以更好地组织组件结构。</li><li>Vue 3 中的虚拟 DOM 支持了 <code>Teleport</code>，可以更好地处理 <code>Portal</code> 和 <code>Modal</code>。</li></ul></li><li>更好的工具链: <ul><li>Vue 3 中的工具链得到了改进，可以更好地支持开发和调试。</li><li>Vue 3 中的 Vue CLI 工具得到了改进，可以更好地支持项目配置和构建。</li><li>Vue 3 中的 devtools 工具得到了改进，可以更好地支持开发和调试。</li></ul></li></ul><p>总的来说，Vue 3 引入了许多新功能和性能改进，使得其在性能、可维护性和开发效率方面都比 Vue 2 更好。</p>`,36),c=[t];function p(i,l){return e(),s("div",null,c)}const u=n(o,[["render",p],["__file","vue.html.vue"]]);export{u as default};
