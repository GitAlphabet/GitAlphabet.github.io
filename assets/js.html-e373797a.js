import{_ as t,M as i,p as l,q as o,R as n,t as a,N as p,a1 as s}from"./framework-5866ffd3.js";const c={},r=s(`<h3 id="js-面试题" tabindex="-1"><a class="header-anchor" href="#js-面试题" aria-hidden="true">#</a> js 面试题</h3><h4 id="_1、documen-write和-innerhtml的区别" tabindex="-1"><a class="header-anchor" href="#_1、documen-write和-innerhtml的区别" aria-hidden="true">#</a> 1、documen.write和 innerHTML的区别</h4><ul><li>document.write只能重绘整个页面</li><li>innerHTML可以重绘页面的一部分</li></ul><h4 id="_2、如何将-js-日期转换为iso标准" tabindex="-1"><a class="header-anchor" href="#_2、如何将-js-日期转换为iso标准" aria-hidden="true">#</a> 2、如何将 JS 日期转换为ISO标准</h4><blockquote><p>toISOString() 方法用于将js日期转换为ISO标准。 它使用ISO标准将js Date对象转换为字符串。如：</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> n <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// YYYY-MM-DDTHH:mm:ss.sssZ</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、js中的substr-和substring-函数有什么区别" tabindex="-1"><a class="header-anchor" href="#_3、js中的substr-和substring-函数有什么区别" aria-hidden="true">#</a> 3、JS中的substr()和substring()函数有什么区别</h4><p>substr() 函数的形式为substr(startIndex,length)。 它从startIndex返回子字符串并返回&#39;length&#39;个字符数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;ello&quot;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>substring() 函数的形式为substring(startIndex,endIndex)。 它返回从startIndex到endIndex - 1的子字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;ell&quot;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、浏览器的重绘和回流导致的性能问题" tabindex="-1"><a class="header-anchor" href="#_4、浏览器的重绘和回流导致的性能问题" aria-hidden="true">#</a> 4、浏览器的重绘和回流导致的性能问题</h4><p>重绘（Repaint）和回流（Reflow）<br> 重绘和回流是渲染步骤中的一小节，但是这两个步骤对于性能影响很大。</p><ul><li>重绘是当节点需要更改外观而不会影响布局的，比如改变 color就叫称为重绘</li><li>回流是布局或者几何属性需要改变就称为回流。</li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>回流必定会发生重绘，重绘不一定会引发回流</strong>。回流所需的成本比重绘高的多，改变深层次的节点很可能导致父节点的一系列回流。</p></div><h4 id="_5、0-1-0-2-0-3-嘛-为什么" tabindex="-1"><a class="header-anchor" href="#_5、0-1-0-2-0-3-嘛-为什么" aria-hidden="true">#</a> 5、0.1 + 0.2 === 0.3 嘛？为什么？</h4><p>答案：不相等。</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>在两数相加时，会先转换成二进制，0.1 和 0.2 转换成二进制的时候尾数会发生无限循环，然后进行对阶运算，JS 引擎对二进制进行截断，所以造成精度丢失。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6、js-数据类型" tabindex="-1"><a class="header-anchor" href="#_6、js-数据类型" aria-hidden="true">#</a> 6、JS 数据类型</h4><ul><li>6 种原始类型，使用 typeof 运算符检查。 <ul><li>undefined：typeof instance === &quot;undefined&quot;</li><li>Boolean：typeof instance === &quot;boolean&quot;</li><li>Number：typeof instance === &quot;number&quot;</li><li>String：typeof instance === &quot;string</li><li>BigInt：typeof instance === &quot;bigint&quot;</li><li>Symbol ：typeof instance === &quot;symbol&quot;</li></ul></li><li>null：typeof instance === &quot;object&quot;。</li><li>Object：typeof instance === &quot;object&quot;。任何 constructed 对象实例的特殊非数据结构类型，也用做数据结构：new <strong>Object</strong>，new <strong>Array</strong>，new <strong>Map</strong>，new <strong>Set</strong>，new <strong>WeakMap</strong>，new <strong>WeakSet</strong>，new <strong>Date</strong>，和几乎所有通过 new keyword 创建的东西。</li><li>Function：非数据结构，尽管 typeof 操作的结果是：typeof instance === &quot;function&quot;。这个结果是为 Function 的一个特殊缩写，尽管每个 Function 构造器都由 Object 构造器派生。</li></ul><h4 id="_7、-1-2-3-map-parseint-的结果是什么" tabindex="-1"><a class="header-anchor" href="#_7、-1-2-3-map-parseint-的结果是什么" aria-hidden="true">#</a> 7、[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseInt)的结果是什么？</h4><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>先说结果：
[&#39;1&#39;, NaN, NaN]
为什么不是[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]呢，下面开始分析
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</li><li>map() 方法按照原始数组元素顺序依次处理元素。</li></ul><p>map(parseInt)其实是：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

即依次运行的是：
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>parseInt(string, radix)</p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">string</td><td style="text-align:left;">必需。要被解析的字符串。</td></tr><tr><td style="text-align:left;">radix</td><td style="text-align:left;">可选。表示要解析的数字的基数。该值介于 2 ~ 36 之间。<br>如果省略该参数或其值为 0，则数字将以 10 为基础来解析。如果它以 “0x” 或 “0X” 开头，将以 16 为基数。<br>如果该参数小于 2 或者大于 36，则 parseInt() 将返回 NaN。</td></tr></tbody></table><h4 id="_8、使用-sort-对数组-3-15-8-29-102-22-进行排序-输出结果" tabindex="-1"><a class="header-anchor" href="#_8、使用-sort-对数组-3-15-8-29-102-22-进行排序-输出结果" aria-hidden="true">#</a> 8、使用 sort() 对数组 [3, 15, 8, 29, 102, 22] 进行排序，输出结果</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">]</span>
<span class="token comment">// 直接使用sort()方法，默认的排序方法会将数组元素转换为字符串，然后比较字符串中字符的UTF-16编码顺序来进行排序。</span>
<span class="token keyword">var</span> brr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>brr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[102,15,22,29,3,8]</span>

<span class="token comment">// sort，可以接收一个函数，返回值是比较两个数的相对顺序的值</span>
<span class="token keyword">var</span> brr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>brr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[3, 8, 15, 22, 29, 102]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9、-和-哪个性能好" tabindex="-1"><a class="header-anchor" href="#_9、-和-哪个性能好" aria-hidden="true">#</a> 9、== 和 === 哪个性能好？</h4><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>== 需要做类型转换，所以性能较差
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_10、宏任务和微任务" tabindex="-1"><a class="header-anchor" href="#_10、宏任务和微任务" aria-hidden="true">#</a> 10、宏任务和微任务</h4><ul><li>宏任务：当前调用栈中执行的任务称为宏任务。（主代码快，定时器等等）。</li><li>微任务： 当前（此次事件循环中）宏任务执行完，<strong>在下一个宏任务开始之前需要执行的任务为微任务</strong>。（可以理解为回调事件，promise.then，proness.nextTick等等）。</li><li>宏任务中的事件放在callback queue中，由事件触发线程维护；微任务的事件放在微任务队列中，由js引擎线程维护。</li></ul><h4 id="_11、陈述输入url回车后的过程" tabindex="-1"><a class="header-anchor" href="#_11、陈述输入url回车后的过程" aria-hidden="true">#</a> 11、陈述输入URL回车后的过程</h4><ul><li>1、读取缓存：搜索自身的 DNS 缓存。(如果 DNS 缓存中找到IP 地址就跳过了接下来查找 IP 地址步骤，直接访问该 IP 地址。)</li><li>2、DNS 解析:将域名解析成 IP 地址</li><li>3、TCP 连接：TCP 三次握手，简易描述三次握手 <ul><li>客户端：服务端你在么？</li><li>服务端：客户端我在，你要连接我么？</li><li>客户端：是的服务端，我要链接。</li><li>连接打通，可以开始请求来</li></ul></li><li>4、发送 HTTP 请求</li><li>5、服务器处理请求并返回 HTTP 报文</li><li>6、浏览器解析渲染页面</li><li>7、断开连接：TCP 四次挥手</li></ul><p>关于第六步浏览器解析渲染页面又可以聊聊如果返回的是html页面</p><ul><li>根据 HTML 解析出 DOM 树</li><li>根据 CSS 解析生成 CSS 规则树</li><li>结合 DOM 树和 CSS 规则树，生成渲染树</li><li>根据渲染树计算每一个节点的信息</li><li>根据计算好的信息绘制页面</li></ul><h4 id="_12、原型链" tabindex="-1"><a class="header-anchor" href="#_12、原型链" aria-hidden="true">#</a> 12、原型链</h4><ul><li>每个构造函数都有一个原型对象</li><li>每个原型对象都有一个指向构造函数的指针</li><li>每个实例函数都有一个指向原型对象的指针。</li><li>查找方式是一层一层查找，直至顶层。Object.prototype</li></ul><h4 id="_13、同源策略" tabindex="-1"><a class="header-anchor" href="#_13、同源策略" aria-hidden="true">#</a> 13、同源策略</h4><p><strong>协议、域名、端口</strong>必须一致。</p><h4 id="_14、防抖和节流" tabindex="-1"><a class="header-anchor" href="#_14、防抖和节流" aria-hidden="true">#</a> 14、防抖和节流</h4><ul><li>防抖：触发事件后，在n秒内，事件只执行一次，如果在n秒内又触发了事件，则会重新计算函数的执行时间。 比如点击按钮，2秒后调用函数，结果在1.5秒的时候又点了，则会重新计算2秒后在调用函数。 应用场景：下拉触底加载下一页。</li><li>节流：连续发生的事件在n秒内，只执行为一次 应用场景比较多的是：搜索查询</li></ul>`,43),u={id:"_15、闭包",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#_15、闭包","aria-hidden":"true"},"#",-1),k={href:"https://gitalphabet.github.io/home/javascript/closure.html",target:"_blank",rel:"noopener noreferrer"},h=s(`<p>闭包就是能够读取其他函数内部变量的函数,可以延长变量的生命周期可以创建私有的环境 优点:</p><ul><li>可以读取其他函数的内部变量</li><li>将变量始终保存在内存中</li><li>可以封装对象的私有属性和方法</li></ul><p>缺点：消耗内存、使用不当会造成内存溢出问题</p><h3 id="_16、数组方法汇总" tabindex="-1"><a class="header-anchor" href="#_16、数组方法汇总" aria-hidden="true">#</a> 16、数组方法汇总</h3><ul><li>map 循环遍历数组、返回一个新的数组</li><li>forEach 循环遍历数组，不改变原数组</li><li>push/pop 在数组的末尾添加/删除元素 改变原数组</li><li>unshift/ shift 在数组的头部添加/删除元素，改变原数组</li><li>join 把数组转化为字符串</li><li>some 有一项返回为true，则整体为true</li><li>every 有一项返回为true，则整体为false</li><li>filter 数组过滤</li><li>slice(start, end) 数组截取，包括开头，不包括截取，返回一个新的数组</li><li>splice(start, number, value) 删除数组元素，改变原数组</li><li>indexof/lastindexof： 查找数组项，返回对应的下标</li><li>concat：数组的拼接，不影响原数组，浅拷贝</li><li>sort：数组排序 改变原数组</li><li>reverse： 数组反转，改变原数组</li></ul><h3 id="_17、移动端底部input被弹出的键盘遮挡" tabindex="-1"><a class="header-anchor" href="#_17、移动端底部input被弹出的键盘遮挡" aria-hidden="true">#</a> 17、移动端底部input被弹出的键盘遮挡</h3><p>Element.srollIntoView():方法让当前的元素滚动到浏览器窗口的可视区域内。</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>// 只要在input的点击事件或者获取焦点的事件中，加入这个api就好了
document.querySelector(&#39;#inputed&#39;).srollIntoView();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_18、click的300ms延迟问题和点击穿透问题" tabindex="-1"><a class="header-anchor" href="#_18、click的300ms延迟问题和点击穿透问题" aria-hidden="true">#</a> 18、click的300ms延迟问题和点击穿透问题</h3><p>300ms延迟导致用户体验不好。为了解决这个问题，一般在移动端用touchstart、touchend、touchmove、tap（模拟的事件）事件来取代click事件。</p><p>方案二：FastClick FastClick是FTLabs专门为解决移动端浏览器300ms点击延迟问题所开发的一个轻量级的库。<strong>FastClick的实现原理是在检测到touchend事件的时候，会通过DOM自定义事件立即触发模拟一个click事件，并把浏览器在300ms之后的click事件阻止掉</strong>。</p><p>点击穿透： 假如页面上有两个元素A和B。B元素在A元素之上。我们在B元素的touchstart事件上注册了一个回调函数，该回调函数的作用是隐藏B元素。我们发现，当我们点击B元素，B元素被隐藏了，随后，A元素触发了click元素。</p><p>这是因为在<strong>移动端浏览器，事件执行的顺序是touchstart&gt;touchend&gt;click</strong>。而click事件有300ms的延迟，当touchstart事件把B元素隐藏之后，隔了300ms，浏览器触发了click事件，但是此时B元素不见了，所以该事件被派发到A元素身上。如果A元素是一个链接，那此时页面就会意外地跳转。</p><h3 id="_19、iphone及ipad下输入框默认内阴影" tabindex="-1"><a class="header-anchor" href="#_19、iphone及ipad下输入框默认内阴影" aria-hidden="true">#</a> 19、iphone及ipad下输入框默认内阴影</h3><p>通过以下代码设置样式：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">element</span><span class="token punctuation">{</span>
  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function m(b,v){const e=i("ExternalLinkIcon");return l(),o("div",null,[r,n("h4",u,[d,a(" 15、"),n("a",k,[a("闭包"),p(e)])]),h])}const f=t(c,[["render",m],["__file","js.html.vue"]]);export{f as default};
