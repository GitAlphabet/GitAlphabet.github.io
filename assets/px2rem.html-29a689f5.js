import{_ as r,M as p,p as o,q as i,R as n,t as a,N as e,a1 as t}from"./framework-5866ffd3.js";const l={},c=n("h3",{id:"px2rem",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#px2rem","aria-hidden":"true"},"#"),a(" px2rem")],-1),d={href:"https://github.com/amfe/lib-flexible",target:"_blank",rel:"noopener noreferrer"},u=t(`<h4 id="_1、安装" tabindex="-1"><a class="header-anchor" href="#_1、安装" aria-hidden="true">#</a> 1、安装</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i lib-flexible <span class="token parameter variable">--save</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2、引入" tabindex="-1"><a class="header-anchor" href="#_2、引入" aria-hidden="true">#</a> 2、引入</h4><p>在项目入口文件 main.js 里 引入 lib-flexible</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&#39;lib-flexible&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3、添加-meta-标签" tabindex="-1"><a class="header-anchor" href="#_3、添加-meta-标签" aria-hidden="true">#</a> 3、添加 meta 标签</h4><p>在项目根目录的 index.html 中添加如下 meta</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4、px-转-rem" tabindex="-1"><a class="header-anchor" href="#_4、px-转-rem" aria-hidden="true">#</a> 4、px 转 rem</h4>`,9),m={href:"https://github.com/Jinjiang/px2rem-loader",target:"_blank",rel:"noopener noreferrer"},v=t(`<h4 id="_5、安装-px2rem-loader" tabindex="-1"><a class="header-anchor" href="#_5、安装-px2rem-loader" aria-hidden="true">#</a> 5、安装 px2rem-loader</h4><p>安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i px2rem-loader --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6、配置-px2rem-loader" tabindex="-1"><a class="header-anchor" href="#_6、配置-px2rem-loader" aria-hidden="true">#</a> 6、配置 px2rem-loader</h4><p>在 vue-cli 生成的 webpack 配置中，vue-loader 的 options 和其他样式文件 loader 最终是都是由 build/utils.js 里的一个方法生成的。</p><p>我们只需在 cssLoader 后再加上一个 px2remLoader 即可，px2rem-loader 的 remUnit 选项意思是 1rem=多少像素，结合 lib-flexible 的方案，我们将 px2remLoader 的 options.remUnit 设置成设计稿宽度的 1/10，这里我们假设设计稿宽为 750px。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// utils.js</span>
<span class="token keyword">var</span> cssLoader <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">sourceMap</span><span class="token operator">:</span> options<span class="token punctuation">.</span>sourceMap
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> px2remLoader <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;px2rem-loader&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">remUnit</span><span class="token operator">:</span> <span class="token number">75</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7、并放进-loaders-数组中" tabindex="-1"><a class="header-anchor" href="#_7、并放进-loaders-数组中" aria-hidden="true">#</a> 7、并放进 loaders 数组中</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// utils.js</span>
<span class="token keyword">function</span> <span class="token function">generateLoaders</span><span class="token punctuation">(</span><span class="token parameter">loader<span class="token punctuation">,</span> loaderOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> loaders <span class="token operator">=</span> <span class="token punctuation">[</span>cssLoader<span class="token punctuation">,</span> px2remLoader<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8、如果某一项不想转化为-rem" tabindex="-1"><a class="header-anchor" href="#_8、如果某一项不想转化为-rem" aria-hidden="true">#</a> 8、如果某一项不想转化为 rem</h4><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span> <span class="token comment">/* no */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改配置后需要重启，然后我们在组件中写单位直接写 px，设计稿量多少就可以写多少了，舒服多了。</p>`,12);function h(k,b){const s=p("ExternalLinkIcon");return o(),i("div",null,[c,n("p",null,[a("配方还是一样：手淘的  "),n("a",d,[a("lib-flexible"),e(s)]),a(" + rem")]),u,n("p",null,[a("实际开发中，我们通过设计稿得到的值单位是 px，所以要将 px 转换成 rem 再写进样式中。 将 px 转换成 rem 我们将使用 px2rem 这个工具，它有 webpack 的 loader："),n("a",m,[a("px2rem-loader"),e(s)])]),v])}const _=r(l,[["render",h],["__file","px2rem.html.vue"]]);export{_ as default};
