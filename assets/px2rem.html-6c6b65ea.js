import{_ as o,M as r,p,q as c,R as e,t as a,N as s,a1 as t}from"./framework-ebd9a7c2.js";const l={},i=e("h2",{id:"px2rem",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#px2rem","aria-hidden":"true"},"#"),a(" px2rem")],-1),d={href:"https://github.com/amfe/lib-flexible",target:"_blank",rel:"noopener noreferrer"},u=t(`<h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i lib-flexible <span class="token parameter variable">--save</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="引入" tabindex="-1"><a class="header-anchor" href="#引入" aria-hidden="true">#</a> 引入</h3><p>在项目入口文件 <code>main.js</code> 里 引入 <code>lib-flexible</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&#39;lib-flexible&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="添加meta标签" tabindex="-1"><a class="header-anchor" href="#添加meta标签" aria-hidden="true">#</a> 添加meta标签</h3><p>在项目根目录的 <code>index.html</code> 中添加如下 <code>meta</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="px转rem" tabindex="-1"><a class="header-anchor" href="#px转rem" aria-hidden="true">#</a> px转rem</h3>`,9),m=e("code",null,"px",-1),h=e("code",null,"px",-1),v=e("code",null,"rem",-1),k=e("code",null,"px",-1),b=e("code",null,"rem",-1),x=e("code",null,"px2rem",-1),_=e("code",null,"webpack",-1),g=e("code",null,"loader",-1),f={href:"https://github.com/Jinjiang/px2rem-loader",target:"_blank",rel:"noopener noreferrer"},y=t(`<h3 id="安装loader" tabindex="-1"><a class="header-anchor" href="#安装loader" aria-hidden="true">#</a> 安装loader</h3><p>安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i px2rem-loader --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="配置loader" tabindex="-1"><a class="header-anchor" href="#配置loader" aria-hidden="true">#</a> 配置loader</h3><p>在 <code>vue-cli</code> 生成的 <code>webpack</code> 配置中，<code>vue-loader</code> 的 <code>options</code> 和其他样式文件 <code>loader</code> 最终是都是由 build/utils.js 里的一个方法生成的。</p><p>我们只需在 <code>cssLoader</code> 后再加上一个 <code>px2remLoader</code> 即可，<code>px2rem-loader</code> 的 <code>remUnit</code> 选项意思是 1rem=多少像素，结合 <code>lib-flexible</code> 的方案，我们将 <code>px2remLoader</code> 的 <code>options.remUnit</code> 设置成设计稿宽度的 1/10，这里我们假设设计稿宽为 750px。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// utils.js</span>
<span class="token keyword">var</span> cssLoader <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">sourceMap</span><span class="token operator">:</span> options<span class="token punctuation">.</span>sourceMap
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> px2remLoader <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;px2rem-loader&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">remUnit</span><span class="token operator">:</span> <span class="token number">75</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="放进loaders数组" tabindex="-1"><a class="header-anchor" href="#放进loaders数组" aria-hidden="true">#</a> 放进loaders数组</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// utils.js</span>
<span class="token keyword">function</span> <span class="token function">generateLoaders</span><span class="token punctuation">(</span><span class="token parameter">loader<span class="token punctuation">,</span> loaderOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> loaders <span class="token operator">=</span> <span class="token punctuation">[</span>cssLoader<span class="token punctuation">,</span> px2remLoader<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="不想转化为-rem" tabindex="-1"><a class="header-anchor" href="#不想转化为-rem" aria-hidden="true">#</a> 不想转化为 rem</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span> <span class="token comment">/* no */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改配置后需要重启，然后我们在组件中写单位直接写 px，设计稿量多少就可以写多少了，舒服多了。</p>`,12);function j(w,L){const n=r("ExternalLinkIcon");return p(),c("div",null,[i,e("p",null,[a("配方还是一样：手淘的  "),e("a",d,[a("lib-flexible"),s(n)]),a(" + rem")]),u,e("p",null,[a("实际开发中，我们通过设计稿得到的值单位是 "),m,a("，所以要将 "),h,a(" 转换成 "),v,a(" 再写进样式中。 将 "),k,a(" 转换成 "),b,a(" 我们将使用 "),x,a(" 这个工具，它有 "),_,a(" 的 "),g,a("："),e("a",f,[a("px2rem-loader"),s(n)])]),y])}const N=o(l,[["render",j],["__file","px2rem.html.vue"]]);export{N as default};
