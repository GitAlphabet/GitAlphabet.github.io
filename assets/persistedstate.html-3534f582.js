import{_ as s,p as n,q as a,a1 as e}from"./framework-cd67069b.js";const t={},o=e(`<h2 id="vuex-persistedstate" tabindex="-1"><a class="header-anchor" href="#vuex-persistedstate" aria-hidden="true">#</a> vuex-persistedstate</h2><p><code>Vuex</code> 是一个专为 <code>Vue.js</code> 应用程序开发的状态管理模式。</p><p>页面刷新，数据就没有了，<code>vuex-persistedstate</code>很好的解决了此类问题。</p><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> vuex-persistedstate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="配置index-js" tabindex="-1"><a class="header-anchor" href="#配置index-js" aria-hidden="true">#</a> 配置index.js</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> actions <span class="token keyword">from</span> <span class="token string">&#39;./actions&#39;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> getters <span class="token keyword">from</span> <span class="token string">&#39;./getters&#39;</span>
<span class="token keyword">import</span> state <span class="token keyword">from</span> <span class="token string">&#39;./state&#39;</span>
<span class="token keyword">import</span> mutations <span class="token keyword">from</span> <span class="token string">&#39;./mutations&#39;</span>
<span class="token keyword">import</span> createLogger <span class="token keyword">from</span> <span class="token string">&#39;vuex/dist/logger&#39;</span> <span class="token comment">//自带的日志</span>
<span class="token keyword">import</span> createPersistedState <span class="token keyword">from</span> <span class="token string">&#39;vuex-persistedstate&#39;</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  actions<span class="token punctuation">,</span>
  getters<span class="token punctuation">,</span>
  state<span class="token punctuation">,</span>
  mutations<span class="token punctuation">,</span>
  <span class="token literal-property property">strict</span><span class="token operator">:</span> debug<span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> debug
    <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">createPersistedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">createPersistedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="createpersistedstate" tabindex="-1"><a class="header-anchor" href="#createpersistedstate" aria-hidden="true">#</a> createPersistedState</h3><p><strong>createPersistedState([options]) API</strong></p><p>使用给定选项创建插件的新实例。可以提供以下选项来配置插件以满足您的特定需求：</p><ul><li><code>key&lt;String&gt;</code>：存储持久状态的关键。（默认：vuex）</li><li><code>paths&lt;Array&gt;</code>：部分持久化状态的任何路径的数组。如果没有给出路径，则保持完整状态。（默认：[]）</li><li><code>reducer&lt;Function&gt;</code>：将调用的函数，用于根据给定路径减少要保留的状态。默认包含值。</li><li><code>subscriber&lt;Function&gt;</code>：一个调用设置变异订阅的函数。默认为<code>store =&gt; handler =&gt; store.subscribe- (handler)</code></li><li><code>storage &lt;Object&gt;</code>：用于代替（或与其组合）<code>getState</code>和<code>setState</code>。默认为<code>localStorage</code></li><li><code>getState&lt;Function&gt;</code>：将被调用以补充先前持久状态的函数。默认使用<code>storage</code></li><li><code>setState&lt;Function&gt;</code>：将被调用以保持给定状态的函数。默认使用<code>storage</code></li><li><code>filter&lt;Function&gt;</code>：将被调用以过滤<code>setState</code>最终将在存储上触发的任何突变的函数。默认为() =&gt; true</li><li><code>arrayMerger&lt;Function&gt;</code>：用于在再水化状态下合并数组的函数。默认为function (store, saved) { return saved }（保存状态替换提供的状态）。</li></ul><h3 id="自定义存储" tabindex="-1"><a class="header-anchor" href="#自定义存储" aria-hidden="true">#</a> 自定义存储</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Store <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>
<span class="token keyword">import</span> createPersistedState <span class="token keyword">from</span> <span class="token string">&#39;vuex-persistedstate&#39;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Cookies <span class="token keyword">from</span> <span class="token string">&#39;js-cookie&#39;</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">createPersistedState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">storage</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">getItem</span><span class="token operator">:</span> <span class="token parameter">key</span> <span class="token operator">=&gt;</span> Cookies<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">// Please see https://github.com/js-cookie/js-cookie#json, on how to handle JSON.</span>
        <span class="token function-variable function">setItem</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
          Cookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">expires</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">secure</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function-variable function">removeItem</span><span class="token operator">:</span> <span class="token parameter">key</span> <span class="token operator">=&gt;</span> Cookies<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),p=[o];function c(i,l){return n(),a("div",null,p)}const d=s(t,[["render",c],["__file","persistedstate.html.vue"]]);export{d as default};
