import{_ as n,p as s,q as a,a1 as e}from"./framework-cd67069b.js";const t={},p=e(`<h2 id="react面试题" tabindex="-1"><a class="header-anchor" href="#react面试题" aria-hidden="true">#</a> React面试题</h2><h3 id="super-props" tabindex="-1"><a class="header-anchor" href="#super-props" aria-hidden="true">#</a> super(props)</h3><p><strong>在构造函数调用 super 并将 props 作为参数传入的作用是啥？</strong></p><ul><li>在调用 <code>super()</code> 方法之前，子类构造函数无法使用this引用，<code>ES6</code> 子类也是如此。</li><li>将 <code>props</code> 参数传递给 <code>super()</code> 调用的主要原因是在子构造函数中能够通过<code>this.props</code>来获取传入的 <code>props</code>。</li></ul><h3 id="setstate" tabindex="-1"><a class="header-anchor" href="#setstate" aria-hidden="true">#</a> setState</h3><p><strong>传入 setState 函数的第二个参数的作用是什么？</strong></p><blockquote><p><strong>该函数会在 setState 函数调用完成并且组件开始重渲染的时候被调用，我们可以用该函数来监听渲染是否完成：</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setState has finished and the component has re-rendered.&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prevState<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">streak</span><span class="token operator">:</span> prevState<span class="token punctuation">.</span>streak <span class="token operator">+</span> props<span class="token punctuation">.</span>count
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="高阶组件" tabindex="-1"><a class="header-anchor" href="#高阶组件" aria-hidden="true">#</a> 高阶组件</h3><blockquote><p><strong>高阶组件(HOC)是接受一个组件并返回一个新组件的函数。基本上，这是一个模式，是从 React 的组合特性中衍生出来的，称其为纯组件，因为它们可以接受任何动态提供的子组件，但不会修改或复制输入组件中的任何行为。</strong></p></blockquote><ul><li>代码重用、逻辑和引导抽象</li><li>渲染劫持</li><li><code>state</code> 抽象和操作</li><li><code>props</code> 处理</li></ul><h3 id="react-render" tabindex="-1"><a class="header-anchor" href="#react-render" aria-hidden="true">#</a> React-render</h3><p><strong>当调用setState时，React render 是如何工作的？</strong></p><p>可以将&quot;render&quot;分为两个步骤：</p><ul><li>虚拟 DOM 渲染:当render方法被调用时，它返回一个新的组件的虚拟 DOM 结构。当调用setState()时，render会被再次调用，<strong>因为默认情况下shouldComponentUpdate总是返回true，所以默认情况下 React 是没有优化的</strong>。</li><li>原生 DOM 渲染:React 只会在虚拟DOM中修改真实DOM节点，而且修改的次数非常少——这是很棒的React特性，它优化了真实DOM的变化，使React变得更快。</li></ul>`,15),o=[p];function c(r,i){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","react.html.vue"]]);export{u as default};
