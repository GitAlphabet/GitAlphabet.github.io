import{_ as t,c as a,o as e,a3 as i}from"./chunks/framework.D5qxx6u8.js";const l="/assets/three.CNR-nkqK.png",o="/assets/four.Dap2JRAH.png",C=JSON.parse('{"title":"TCP","description":"","frontmatter":{},"headers":[],"relativePath":"home/http/tcp.md","filePath":"home/http/tcp.md","lastUpdated":1717944999000}'),r={name:"home/http/tcp.md"},s=i('<h1 id="tcp" tabindex="-1">TCP <a class="header-anchor" href="#tcp" aria-label="Permalink to &quot;TCP&quot;">​</a></h1><p>Transmission Control Protocol 传输控制协议</p><h2 id="位码-tcp标志位" tabindex="-1">位码(tcp标志位) <a class="header-anchor" href="#位码-tcp标志位" aria-label="Permalink to &quot;位码(tcp标志位)&quot;">​</a></h2><ul><li>SYN(synchronous建立联机)</li><li>ACK(acknowledgement 确认)</li><li>PSH(push传送)</li><li>FIN(finish结束)</li><li>RST(reset重置)</li><li>URG(urgent紧急)</li><li>Sequence number(顺序号码)</li><li>Acknowledge number(确认号码)</li></ul><h2 id="三次握手" tabindex="-1">三次握手 <a class="header-anchor" href="#三次握手" aria-label="Permalink to &quot;三次握手&quot;">​</a></h2><p>流程图：</p><p><img src="'+l+'" alt="avatar"></p><ul><li>客户端 向 服务器端 发送一个 SYN（SYN = 1,seq = 10000）包，请求一个主动打开。该包携带客户端为这个连接请求设定的随机数A作为消息列号。</li><li>服务器端接收到一个 SYN 包后，把该包放入 SYN 队列中；回送一个SYN/ACK (SYN = 1,seq = 20000; ACK = 1,ack = 10001)。ACK的确认码应为A+1，SYN/ACK包本身携带一个随机产生的序号B。</li><li>客户端收到 SYN/ACK 包后，发送一个 ACK (ACK = 1,ack = 20001) 的包，该包的序号被设定为A+1，而 ACK 的确认码为B+1。当服务器端收到这个 ACK 包的时候，把请求帧从 SYN 队列中移出，放置 ACCEPT 队列中。</li></ul><h2 id="四次挥手" tabindex="-1">四次挥手 <a class="header-anchor" href="#四次挥手" aria-label="Permalink to &quot;四次挥手&quot;">​</a></h2><p>流程图：</p><p><img src="'+o+'" alt="avatar"></p>',11),c=[s];function n(p,h,_,d,m,u){return e(),a("div",null,c)}const S=t(r,[["render",n]]);export{C as __pageData,S as default};
